import React from 'react';
import qs from 'qs';
import { useEffect } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { Link, useNavigate } from 'react-router-dom';
import Categories from '../components/Categories';
import Sort, { list } from '../components/Sort';
import PizzaBlock from '../components/PizzaBlock';
import Skeleton from '../components/PizzaBlock/Skeleton';
import Pagination from '../components/Pagination';
import {
  filterStateSelector,
  setcategotyId,
  setCurrentPage,
  setFilters,
} from '../redux/slices/filterSlice';
import { fetchPizzas, pizzasStateSelector } from '../redux/slices/pizzaSlice';

const Home = () => {
  const navigate = useNavigate();
  const isMounted = React.useRef(false);
  const isSearch = React.useRef(false);
  const { categoryId, sort, currentPage, searchValue } =
    useSelector(filterStateSelector);
  const { items, status } = useSelector(pizzasStateSelector);
  const sortType = sort.sortProperty;

  const dispatch = useDispatch();

  const onChangeCategory = (id) => {
    dispatch(setcategotyId(id));
  };

  const onChangePage = (number) => {
    dispatch(setCurrentPage(number));
  };

  const getPizzas = async () => {
    const order = sortType.includes('-') ? 'asc' : 'desc';
    const sortBy = sortType.replace('-', '');
    const category = categoryId > 0 ? `category=${categoryId}` : '';
    const search = searchValue ? `&title=${searchValue}` : '';

    dispatch(
      fetchPizzas({
        order,
        sortBy,
        category,
        search,
        currentPage,
      })
    );

    window.scrollTo(0, 0);
  };

  React.useEffect(() => {
    if (window.location.search) {
      const params = qs.parse(window.location.search.substring(1));

      const sort = list.find((obj) => obj.sortProperty === params.sortProperty);

      dispatch(
        setFilters({
          ...params,
          sort,
        })
      );
      isSearch.current = true;
    }
  }, []);

  React.useEffect(() => {
    if (isMounted.current) {
      const queryString = qs.stringify({
        sortProperty: sortType,
        categoryId,
        currentPage,
      });
      navigate(`?${queryString}`);
    }
  }, [categoryId, sortType, searchValue, currentPage]);

  useEffect(() => {
    if (!isSearch.current) {
      getPizzas();
    }
    isSearch.current = false;
    isMounted.current = true;
  }, [categoryId, sortType, searchValue, currentPage]);

  const pizzas = items.map((obj) => (
    <Link key={obj.id} to={`/pizza/${obj.id}`}>
      <PizzaBlock {...obj} />
    </Link>
  ));
  const skeletons = [...new Array(6)].map((_, i) => <Skeleton key={i} />);

  return (
    <div className="container">
      <div className="content__top">
        <Categories value={categoryId} onClickCategory={onChangeCategory} />
        <Sort />
      </div>
      <h2 className="content__title">–í—Å–µ –ø–∏—Ü—Ü—ã</h2>
      {status === 'rejected' ? (
        <div className="content__error-info">
          {' '}
          <h2>
            Error ocured <span>üòï</span>
          </h2>
          <p>
            Unfortunately we can not fetch pizzas
            <br />
            –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∑–∞–∫–∞–∑–∞—Ç—å –ø–∏—Ü—Ü—É, –ø–µ—Ä–µ–π–¥–∏ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É.
          </p>
        </div>
      ) : (
        <div className="content__items">
          {status === 'pending' ? skeletons : pizzas}
        </div>
      )}

      <Pagination currentPage={currentPage} onChangePage={onChangePage} />
    </div>
  );
};

export default Home;

// –µ—Å–ª–∏ –º—ã —Ö–æ—Ç–∏–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ —á—Ç–æ —É –Ω–∞—Å –≤ –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ—á–∫–µ —Ä–µ–Ω–¥–µ—Ä–∏—Ç—å —á—Ç–æ —Ç–æ, –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º useLocation
// —Ö—É–∫ useLocation –¥–∞–µ—Ç –Ω–∞–º –ø–æ–Ω—è—Ç—å —á—Ç–æ –∞–¥—Ä–µ—Å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∞–ª–∞—Å—å, –∏ –Ω–∞ —Ç–æ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –æ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫—É

// —Ö—É–∫ —é–∑–ø–∞—Ä–∞–º—Å –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤–∑—è—Ç—å –∫–∞–∫–∏–µ —Ç–æ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Å —É—Ä–ª —Å—Ç—Ä–æ–∫–∏ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Ö –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä –≤ –∑–∞–ø—Ä–æ—Å–µ

// —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, —Ç–µ –∫–æ—Ç–æ—Ä—ã–µ –±–µ–∑ : —É–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –≤ —Ä–æ—É—Ç–∞—Ö, –º–æ–∂–Ω–æ –≤—ã—Ç–∞—â–∏—Ç—å —Å –ø–æ–º–æ—â—å—é window.location.search –∏–ª–∏ –∂–µ —Å –ø–æ–º–æ—â—å—é —Ä–æ—É—Ç–µ—Ä –¥–æ–º —Ö—É–∫–∞ useSearchParams
// –∏–ª–∏ –∂–µ –≤ —Å –ø–æ–º–æ—â—å—é —Ö—É–∫–∞ useLocation, –≤–Ω—É—Ç—Ä–∏ —Ç–æ–≥–æ —á—Ç–æ –æ–Ω –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±—É–¥–µ—Ç —Å–≤–æ–π—Å—Ç–≤–æ search

// –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å –∑–∞–¥–∞—á–∞ —á—Ç–æ –± –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —á–∞—Å—Ç–∏ —Å–∞–π—Ç–∞ –æ—Å—Ç–∞–≤–∞–ª–∏—Å—å —Å—Ç–∞—Ç–∏—á–Ω—ã–º–∏, –∞ –¥—Ä—É–≥–∏–µ –º–µ–Ω—è–ª–∏—Å—å, –º—ã –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å outlet
